Assignment goals:
•Introduction to Lucene: Setup, indexing, search
•Zipf’s law

For this homework, you need to download and setup Lucene https://lucene.apache.org/, an open source information retrieval library. 
Lucene is widely used in both academic and commercial search engine applications. Solr and ElasticSearch are both based on the Lucene libraries.

In order to make things easier for you, we are providing you with a the basic code (see attachement) that can serve as a 
starting point to create your search engine. This code is based on Lucene Version 4.7.2 (see attached files, or go to 
https://archive.apache.org/dist/lucene/java/4.7.2/) and is written in Java. However, it is up to you to choose the implementation of 
your preference.

Once you download Lucene, the setup is pretty straightforward. You need to create a new Java project and add the following three 
jars into your project’s list of referenced libraries: 1) lucene-core-VERSION.jar, 2) lucene-queryparser-VERSION.jar, and 
3) lucene-analyzers-common-VERSION.jar. Where VERSION is to be substituted with the version of Lucene that you downloaded. 
For example, in the provided example, we have version 4.7.2, therefore, the first jar file would be lucene-core-4.7.2.jar. 
Make sure that the system requirements for that version are met.

You will need to go through Lucene’s documentation (and the provided code) to perform the following:
1.Index the raw (unpre-processed) CACM corpus http://www.search-engines-book.com/collections/ using Lucene. Make sure to use “SimpleAnalyzer” 
as your analyzer.
2.Build a list of (unique term, term_frequency) pairs over the entire collection. Sort by frequency.
3.Plot the Zipfian curve based on the list generated in (2) (you do not need Lucene to perform this. You may use any platform/software 
of your choosing to generate the plot)
4.Perform search for the queries below. You need to return the top 100 results for each query. Use the default document scoring/ranking 
function provided by Lucene.
	a.portable operating systems
	b.code optimization for space efficiency
	c.parallel algorithms
	d.parallel processor in information retrieval
5.  Compare the total number of matches in 4 to that obtained in hw3
